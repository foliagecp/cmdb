// Code generated by pigeon; DO NOT EDIT.

package qdsl

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

type Limits struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

type Limit struct {
	Sort   any     `json:"sort"`
	Limits *Limits `json:"limits"`
}

type Direction struct {
	Direction string `json:"direction"`
	Field     any    `json:"field"`
}

type Variable struct {
	Variable   []string `json:"variable"`
	Op         string   `json:"op"`
	Evaluation string   `json:"evaluation"`
}

type Expression struct {
	Expression *Variable `json:"expression"`
	BoolOp     string    `json:"boolOp"`
}

type Filter struct {
	Filter [][]*Expression `json:"filter"`

	// ...limits
}

type Range struct {
	From *string `json:"from"`
	To   *string `json:"to"`
}

type Node struct {
	Name   *string  `json:"name"`
	Ranges []*Range `json:"ranges"`
}

type Block struct {
	*Filter  `json:"filter"`
	Any      bool       `json:"any"`
	Catchall bool       `json:"catchall"`
	Node     *Node      `json:"node"`
	IsGroup  bool       `json:"isGroup"`
	Children []*Element `json:"children"`
}

type Path []*Block

type Element struct {
	Action     string `json:"action"`
	Path       Path   `json:"path"`
	RootExpand bool   `json:"rootExpand"`
	Query      string `json:"query"`
}

func toString(i interface{}) string {
	if i == nil {
		return ""
	}
	switch i.(type) {
	case string:
		return i.(string)
	default:
		return string(i.([]byte))
	}
}

func arrayToStringArray(arr interface{}) (result []string) {
	for _, i := range arr.([]interface{}) {
		result = append(result, toString(i))
	}
	return
}

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 85, col: 1, offset: 1518},
			expr: &ruleRefExpr{
				pos:  position{line: 85, col: 9, offset: 1526},
				name: "QUERY",
			},
		},
		{
			name: "QUERY",
			pos:  position{line: 87, col: 1, offset: 1533},
			expr: &actionExpr{
				pos: position{line: 87, col: 9, offset: 1541},
				run: (*parser).callonQUERY1,
				expr: &seqExpr{
					pos: position{line: 87, col: 9, offset: 1541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 87, col: 9, offset: 1541},
							label: "base",
							expr: &zeroOrMoreExpr{
								pos: position{line: 87, col: 14, offset: 1546},
								expr: &actionExpr{
									pos: position{line: 87, col: 15, offset: 1547},
									run: (*parser).callonQUERY5,
									expr: &seqExpr{
										pos: position{line: 87, col: 15, offset: 1547},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 87, col: 15, offset: 1547},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 87, col: 17, offset: 1549},
													name: "ELEMENT",
												},
											},
											&choiceExpr{
												pos: position{line: 87, col: 26, offset: 1558},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 87, col: 26, offset: 1558},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 87, col: 26, offset: 1558},
																name: "__",
															},
															&litMatcher{
																pos:        position{line: 87, col: 29, offset: 1561},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&ruleRefExpr{
																pos:  position{line: 87, col: 33, offset: 1565},
																name: "__",
															},
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 87, col: 38, offset: 1570},
														expr: &charClassMatcher{
															pos:        position{line: 87, col: 38, offset: 1570},
															val:        "[ ]",
															chars:      []rune{' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 64, offset: 1596},
							label: "last",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 69, offset: 1601},
								name: "ELEMENT",
							},
						},
					},
				},
			},
		},
		{
			name: "ELEMENT",
			pos:  position{line: 91, col: 1, offset: 1654},
			expr: &actionExpr{
				pos: position{line: 91, col: 11, offset: 1664},
				run: (*parser).callonELEMENT1,
				expr: &seqExpr{
					pos: position{line: 91, col: 11, offset: 1664},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 91, col: 11, offset: 1664},
							label: "action",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 18, offset: 1671},
								name: "UNARY",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 24, offset: 1677},
							label: "levels",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 31, offset: 1684},
								expr: &actionExpr{
									pos: position{line: 91, col: 32, offset: 1685},
									run: (*parser).callonELEMENT7,
									expr: &seqExpr{
										pos: position{line: 91, col: 32, offset: 1685},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 91, col: 32, offset: 1685},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 91, col: 34, offset: 1687},
													name: "LEVEL",
												},
											},
											&litMatcher{
												pos:        position{line: 91, col: 40, offset: 1693},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 64, offset: 1717},
							label: "last",
							expr: &choiceExpr{
								pos: position{line: 91, col: 70, offset: 1723},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 91, col: 70, offset: 1723},
										name: "LEVEL",
									},
									&litMatcher{
										pos:        position{line: 91, col: 78, offset: 1731},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UNARY",
			pos:  position{line: 107, col: 1, offset: 2103},
			expr: &actionExpr{
				pos: position{line: 107, col: 9, offset: 2111},
				run: (*parser).callonUNARY1,
				expr: &labeledExpr{
					pos:   position{line: 107, col: 9, offset: 2111},
					label: "op",
					expr: &zeroOrOneExpr{
						pos: position{line: 107, col: 12, offset: 2114},
						expr: &litMatcher{
							pos:        position{line: 107, col: 13, offset: 2115},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
		},
		{
			name: "NODE",
			pos:  position{line: 114, col: 1, offset: 2190},
			expr: &choiceExpr{
				pos: position{line: 114, col: 8, offset: 2197},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 114, col: 8, offset: 2197},
						run: (*parser).callonNODE2,
						expr: &seqExpr{
							pos: position{line: 114, col: 8, offset: 2197},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 114, col: 8, offset: 2197},
									label: "nodename",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 17, offset: 2206},
										name: "NODENAME",
									},
								},
								&labeledExpr{
									pos:   position{line: 114, col: 26, offset: 2215},
									label: "ranges",
									expr: &zeroOrOneExpr{
										pos: position{line: 114, col: 33, offset: 2222},
										expr: &ruleRefExpr{
											pos:  position{line: 114, col: 33, offset: 2222},
											name: "NODERANGE",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 3, offset: 2440},
						run: (*parser).callonNODE9,
						expr: &labeledExpr{
							pos:   position{line: 124, col: 3, offset: 2440},
							label: "ranges",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 10, offset: 2447},
								name: "NODERANGE",
							},
						},
					},
				},
			},
		},
		{
			name: "NODENAME",
			pos:  position{line: 134, col: 1, offset: 2635},
			expr: &labeledExpr{
				pos:   position{line: 134, col: 12, offset: 2646},
				label: "nodename",
				expr: &actionExpr{
					pos: position{line: 134, col: 22, offset: 2656},
					run: (*parser).callonNODENAME2,
					expr: &seqExpr{
						pos: position{line: 134, col: 22, offset: 2656},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 134, col: 22, offset: 2656},
								label: "head",
								expr: &charClassMatcher{
									pos:        position{line: 134, col: 27, offset: 2661},
									val:        "[A-Za-z0-9]",
									ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&labeledExpr{
								pos:   position{line: 134, col: 39, offset: 2673},
								label: "tail",
								expr: &zeroOrMoreExpr{
									pos: position{line: 134, col: 44, offset: 2678},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 44, offset: 2678},
										val:        "[A-Za-z_0-9\\\\-]i",
										chars:      []rune{'_', '\\', '-'},
										ranges:     []rune{'a', 'z', 'a', 'z', '0', '9'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NODERANGE",
			pos:  position{line: 138, col: 1, offset: 2776},
			expr: &actionExpr{
				pos: position{line: 138, col: 13, offset: 2788},
				run: (*parser).callonNODERANGE1,
				expr: &seqExpr{
					pos: position{line: 138, col: 13, offset: 2788},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 13, offset: 2788},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 17, offset: 2792},
							label: "ranges",
							expr: &oneOrMoreExpr{
								pos: position{line: 138, col: 24, offset: 2799},
								expr: &actionExpr{
									pos: position{line: 138, col: 25, offset: 2800},
									run: (*parser).callonNODERANGE6,
									expr: &seqExpr{
										pos: position{line: 138, col: 25, offset: 2800},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 138, col: 25, offset: 2800},
												label: "from",
												expr: &ruleRefExpr{
													pos:  position{line: 138, col: 30, offset: 2805},
													name: "INT",
												},
											},
											&labeledExpr{
												pos:   position{line: 138, col: 34, offset: 2809},
												label: "to",
												expr: &zeroOrOneExpr{
													pos: position{line: 138, col: 37, offset: 2812},
													expr: &actionExpr{
														pos: position{line: 138, col: 38, offset: 2813},
														run: (*parser).callonNODERANGE12,
														expr: &seqExpr{
															pos: position{line: 138, col: 38, offset: 2813},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 138, col: 38, offset: 2813},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
																&labeledExpr{
																	pos:   position{line: 138, col: 42, offset: 2817},
																	label: "to",
																	expr: &ruleRefExpr{
																		pos:  position{line: 138, col: 45, offset: 2820},
																		name: "INT",
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 140, col: 5, offset: 2845},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 140, col: 8, offset: 2848},
												expr: &litMatcher{
													pos:        position{line: 140, col: 8, offset: 2848},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 140, col: 13, offset: 2853},
												name: "__",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 144, col: 5, offset: 2968},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "INT",
			pos:  position{line: 148, col: 1, offset: 2997},
			expr: &actionExpr{
				pos: position{line: 148, col: 7, offset: 3003},
				run: (*parser).callonINT1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 7, offset: 3003},
					label: "num",
					expr: &oneOrMoreExpr{
						pos: position{line: 148, col: 11, offset: 3007},
						expr: &charClassMatcher{
							pos:        position{line: 148, col: 11, offset: 3007},
							val:        "[0-9a-z]i",
							ranges:     []rune{'0', '9', 'a', 'z'},
							ignoreCase: true,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "LEVEL",
			pos:  position{line: 152, col: 1, offset: 3078},
			expr: &choiceExpr{
				pos: position{line: 152, col: 9, offset: 3086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 9, offset: 3086},
						run: (*parser).callonLEVEL2,
						expr: &seqExpr{
							pos: position{line: 152, col: 9, offset: 3086},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 9, offset: 3086},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 152, col: 13, offset: 3090},
									label: "children",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 22, offset: 3099},
										name: "QUERY",
									},
								},
								&litMatcher{
									pos:        position{line: 152, col: 28, offset: 3105},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 161, col: 3, offset: 3299},
						run: (*parser).callonLEVEL8,
						expr: &seqExpr{
							pos: position{line: 161, col: 3, offset: 3299},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 161, col: 3, offset: 3299},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 161, col: 7, offset: 3303},
									label: "block",
									expr: &ruleRefExpr{
										pos:  position{line: 161, col: 13, offset: 3309},
										name: "BLOCK",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 164, col: 3, offset: 3393},
						run: (*parser).callonLEVEL13,
						expr: &seqExpr{
							pos: position{line: 164, col: 3, offset: 3393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 3, offset: 3393},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 164, col: 7, offset: 3397},
									label: "block",
									expr: &ruleRefExpr{
										pos:  position{line: 164, col: 13, offset: 3403},
										name: "BLOCK",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 167, col: 3, offset: 3470},
						run: (*parser).callonLEVEL18,
						expr: &seqExpr{
							pos: position{line: 167, col: 3, offset: 3470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 167, col: 3, offset: 3470},
									label: "node",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 8, offset: 3475},
										name: "NODE",
									},
								},
								&labeledExpr{
									pos:   position{line: 167, col: 13, offset: 3480},
									label: "block",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 19, offset: 3486},
										name: "BLOCK",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BLOCK",
			pos:  position{line: 171, col: 1, offset: 3573},
			expr: &choiceExpr{
				pos: position{line: 171, col: 9, offset: 3581},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 171, col: 9, offset: 3581},
						run: (*parser).callonBLOCK2,
						expr: &seqExpr{
							pos: position{line: 171, col: 9, offset: 3581},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 171, col: 9, offset: 3581},
									label: "limits",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 16, offset: 3588},
										name: "LIMIT",
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 22, offset: 3594},
									label: "filter",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 29, offset: 3601},
										name: "SEARCH",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 3, offset: 3877},
						run: (*parser).callonBLOCK8,
						expr: &seqExpr{
							pos: position{line: 183, col: 3, offset: 3877},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 183, col: 3, offset: 3877},
									label: "filter",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 10, offset: 3884},
										name: "SEARCH",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 17, offset: 3891},
									label: "limits",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 24, offset: 3898},
										name: "LIMIT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 3, offset: 4172},
						run: (*parser).callonBLOCK14,
						expr: &labeledExpr{
							pos:   position{line: 195, col: 3, offset: 4172},
							label: "filter",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 10, offset: 4179},
								name: "SEARCH",
							},
						},
					},
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 208, col: 1, offset: 4453},
			expr: &choiceExpr{
				pos: position{line: 208, col: 9, offset: 4461},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 208, col: 9, offset: 4461},
						run: (*parser).callonLIMIT2,
						expr: &seqExpr{
							pos: position{line: 208, col: 9, offset: 4461},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 208, col: 9, offset: 4461},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 13, offset: 4465},
									label: "sort",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 18, offset: 4470},
										name: "SORT",
									},
								},
								&labeledExpr{
									pos:   position{line: 208, col: 23, offset: 4475},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 29, offset: 4481},
										name: "NUMBER",
									},
								},
								&litMatcher{
									pos:        position{line: 208, col: 36, offset: 4488},
									val:        "..",
									ignoreCase: false,
									want:       "\"..\"",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 41, offset: 4493},
									label: "offset",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 48, offset: 4500},
										name: "NUMBER",
									},
								},
								&litMatcher{
									pos:        position{line: 208, col: 55, offset: 4507},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 210, col: 3, offset: 4595},
						run: (*parser).callonLIMIT13,
						expr: &seqExpr{
							pos: position{line: 210, col: 3, offset: 4595},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 210, col: 3, offset: 4595},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 210, col: 7, offset: 4599},
									label: "sort",
									expr: &ruleRefExpr{
										pos:  position{line: 210, col: 12, offset: 4604},
										name: "SORT",
									},
								},
								&labeledExpr{
									pos:   position{line: 210, col: 17, offset: 4609},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 210, col: 23, offset: 4615},
										name: "NUMBER",
									},
								},
								&litMatcher{
									pos:        position{line: 210, col: 30, offset: 4622},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 212, col: 3, offset: 4700},
						run: (*parser).callonLIMIT21,
						expr: &seqExpr{
							pos: position{line: 212, col: 3, offset: 4700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 212, col: 3, offset: 4700},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 212, col: 7, offset: 4704},
									label: "sort",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 12, offset: 4709},
										name: "SORT",
									},
								},
								&litMatcher{
									pos:        position{line: 212, col: 17, offset: 4714},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SORT",
			pos:  position{line: 215, col: 1, offset: 4756},
			expr: &zeroOrMoreExpr{
				pos: position{line: 215, col: 8, offset: 4763},
				expr: &actionExpr{
					pos: position{line: 215, col: 9, offset: 4764},
					run: (*parser).callonSORT2,
					expr: &seqExpr{
						pos: position{line: 215, col: 9, offset: 4764},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 215, col: 9, offset: 4764},
								label: "direction",
								expr: &ruleRefExpr{
									pos:  position{line: 215, col: 19, offset: 4774},
									name: "DIRECTION",
								},
							},
							&labeledExpr{
								pos:   position{line: 215, col: 29, offset: 4784},
								label: "v",
								expr: &ruleRefExpr{
									pos:  position{line: 215, col: 31, offset: 4786},
									name: "VARIABLE",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 215, col: 40, offset: 4795},
								expr: &litMatcher{
									pos:        position{line: 215, col: 40, offset: 4795},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 215, col: 45, offset: 4800},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "DIRECTION",
			pos:  position{line: 218, col: 1, offset: 4858},
			expr: &actionExpr{
				pos: position{line: 218, col: 13, offset: 4870},
				run: (*parser).callonDIRECTION1,
				expr: &labeledExpr{
					pos:   position{line: 218, col: 13, offset: 4870},
					label: "d",
					expr: &zeroOrOneExpr{
						pos: position{line: 218, col: 15, offset: 4872},
						expr: &litMatcher{
							pos:        position{line: 218, col: 16, offset: 4873},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SEARCH",
			pos:  position{line: 225, col: 1, offset: 4942},
			expr: &actionExpr{
				pos: position{line: 225, col: 10, offset: 4951},
				run: (*parser).callonSEARCH1,
				expr: &labeledExpr{
					pos:   position{line: 225, col: 10, offset: 4951},
					label: "filters",
					expr: &zeroOrMoreExpr{
						pos: position{line: 225, col: 18, offset: 4959},
						expr: &actionExpr{
							pos: position{line: 225, col: 19, offset: 4960},
							run: (*parser).callonSEARCH4,
							expr: &seqExpr{
								pos: position{line: 225, col: 19, offset: 4960},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 225, col: 19, offset: 4960},
										val:        "[?",
										ignoreCase: false,
										want:       "\"[?\"",
									},
									&labeledExpr{
										pos:   position{line: 225, col: 24, offset: 4965},
										label: "filter",
										expr: &ruleRefExpr{
											pos:  position{line: 225, col: 31, offset: 4972},
											name: "FILTER",
										},
									},
									&litMatcher{
										pos:        position{line: 225, col: 38, offset: 4979},
										val:        "?]",
										ignoreCase: false,
										want:       "\"?]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILTER",
			pos:  position{line: 231, col: 1, offset: 5041},
			expr: &oneOrMoreExpr{
				pos: position{line: 231, col: 10, offset: 5050},
				expr: &actionExpr{
					pos: position{line: 231, col: 11, offset: 5051},
					run: (*parser).callonFILTER2,
					expr: &seqExpr{
						pos: position{line: 231, col: 11, offset: 5051},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 231, col: 11, offset: 5051},
								label: "expression",
								expr: &ruleRefExpr{
									pos:  position{line: 231, col: 22, offset: 5062},
									name: "EXPRESSION",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 231, col: 33, offset: 5073},
								name: "__",
							},
							&labeledExpr{
								pos:   position{line: 231, col: 36, offset: 5076},
								label: "boolOp",
								expr: &zeroOrOneExpr{
									pos: position{line: 231, col: 43, offset: 5083},
									expr: &choiceExpr{
										pos: position{line: 231, col: 44, offset: 5084},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 231, col: 44, offset: 5084},
												val:        "&&",
												ignoreCase: false,
												want:       "\"&&\"",
											},
											&litMatcher{
												pos:        position{line: 231, col: 51, offset: 5091},
												val:        "||",
												ignoreCase: false,
												want:       "\"||\"",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 231, col: 58, offset: 5098},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "EXPRESSION",
			pos:  position{line: 236, col: 1, offset: 5214},
			expr: &actionExpr{
				pos: position{line: 236, col: 14, offset: 5227},
				run: (*parser).callonEXPRESSION1,
				expr: &seqExpr{
					pos: position{line: 236, col: 14, offset: 5227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 236, col: 14, offset: 5227},
							label: "variable",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 23, offset: 5236},
								name: "VARIABLE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 32, offset: 5245},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 35, offset: 5248},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 38, offset: 5251},
								name: "OP",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 41, offset: 5254},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 44, offset: 5257},
							label: "evaluation",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 55, offset: 5268},
								name: "EVALUATION",
							},
						},
					},
				},
			},
		},
		{
			name: "OP",
			pos:  position{line: 244, col: 1, offset: 5440},
			expr: &choiceExpr{
				pos: position{line: 244, col: 6, offset: 5445},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 244, col: 6, offset: 5445},
						val:        "==",
						ignoreCase: false,
						want:       "\"==\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 3, offset: 5452},
						val:        "=~",
						ignoreCase: false,
						want:       "\"=~\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 3, offset: 5459},
						val:        "!~",
						ignoreCase: false,
						want:       "\"!~\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 3, offset: 5466},
						val:        "<=",
						ignoreCase: false,
						want:       "\"<=\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 3, offset: 5473},
						val:        ">=",
						ignoreCase: false,
						want:       "\">=\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 3, offset: 5480},
						val:        "<",
						ignoreCase: false,
						want:       "\"<\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 3, offset: 5486},
						val:        ">",
						ignoreCase: false,
						want:       "\">\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 3, offset: 5492},
						val:        "!=",
						ignoreCase: false,
						want:       "\"!=\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 3, offset: 5499},
						val:        "in",
						ignoreCase: true,
						want:       "\"IN\"i",
					},
					&litMatcher{
						pos:        position{line: 253, col: 3, offset: 5507},
						val:        "like",
						ignoreCase: true,
						want:       "\"LIKE\"i",
					},
					&litMatcher{
						pos:        position{line: 254, col: 3, offset: 5517},
						val:        "not like",
						ignoreCase: true,
						want:       "\"NOT LIKE\"i",
					},
				},
			},
		},
		{
			name: "VARIABLE",
			pos:  position{line: 256, col: 1, offset: 5530},
			expr: &actionExpr{
				pos: position{line: 256, col: 12, offset: 5541},
				run: (*parser).callonVARIABLE1,
				expr: &seqExpr{
					pos: position{line: 256, col: 12, offset: 5541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 256, col: 12, offset: 5541},
							label: "variable",
							expr: &choiceExpr{
								pos: position{line: 256, col: 22, offset: 5551},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 256, col: 22, offset: 5551},
										val:        "object",
										ignoreCase: false,
										want:       "\"object\"",
									},
									&litMatcher{
										pos:        position{line: 256, col: 33, offset: 5562},
										val:        "link",
										ignoreCase: false,
										want:       "\"link\"",
									},
									&litMatcher{
										pos:        position{line: 256, col: 42, offset: 5571},
										val:        "path",
										ignoreCase: false,
										want:       "\"path\"",
									},
									&litMatcher{
										pos:        position{line: 256, col: 51, offset: 5580},
										val:        "@",
										ignoreCase: false,
										want:       "\"@\"",
									},
									&litMatcher{
										pos:        position{line: 256, col: 57, offset: 5586},
										val:        "$",
										ignoreCase: false,
										want:       "\"$\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 62, offset: 5591},
							label: "attribute",
							expr: &oneOrMoreExpr{
								pos: position{line: 256, col: 72, offset: 5601},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 72, offset: 5601},
									name: "ATTRIBUTE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ATTRIBUTE",
			pos:  position{line: 260, col: 1, offset: 5679},
			expr: &choiceExpr{
				pos: position{line: 260, col: 13, offset: 5691},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 14, offset: 5692},
						run: (*parser).callonATTRIBUTE2,
						expr: &seqExpr{
							pos: position{line: 260, col: 14, offset: 5692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 260, col: 14, offset: 5692},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 260, col: 18, offset: 5696},
									label: "attrname",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 27, offset: 5705},
										name: "ATTRNAME",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 4, offset: 5744},
						run: (*parser).callonATTRIBUTE7,
						expr: &seqExpr{
							pos: position{line: 262, col: 4, offset: 5744},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 262, col: 4, offset: 5744},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 8, offset: 5748},
									label: "attrname",
									expr: &choiceExpr{
										pos: position{line: 262, col: 18, offset: 5758},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 262, col: 18, offset: 5758},
												name: "STRING_LITERAL",
											},
											&ruleRefExpr{
												pos:  position{line: 262, col: 35, offset: 5775},
												name: "INT",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 262, col: 40, offset: 5780},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ATTRNAME",
			pos:  position{line: 265, col: 1, offset: 5812},
			expr: &actionExpr{
				pos: position{line: 265, col: 12, offset: 5823},
				run: (*parser).callonATTRNAME1,
				expr: &labeledExpr{
					pos:   position{line: 265, col: 12, offset: 5823},
					label: "attrname",
					expr: &oneOrMoreExpr{
						pos: position{line: 265, col: 21, offset: 5832},
						expr: &charClassMatcher{
							pos:        position{line: 265, col: 21, offset: 5832},
							val:        "[a-z\\\\*0-9_\\\\-]i",
							chars:      []rune{'\\', '*', '_', '\\', '-'},
							ranges:     []rune{'a', 'z', '0', '9'},
							ignoreCase: true,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "STRING_LITERAL",
			pos:  position{line: 275, col: 1, offset: 5984},
			expr: &actionExpr{
				pos: position{line: 275, col: 18, offset: 6001},
				run: (*parser).callonSTRING_LITERAL1,
				expr: &seqExpr{
					pos: position{line: 275, col: 18, offset: 6001},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 18, offset: 6001},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 22, offset: 6005},
							label: "text",
							expr: &oneOrMoreExpr{
								pos: position{line: 275, col: 27, offset: 6010},
								expr: &choiceExpr{
									pos: position{line: 275, col: 28, offset: 6011},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 275, col: 28, offset: 6011},
											val:        "\\'",
											ignoreCase: false,
											want:       "\"\\\\'\"",
										},
										&charClassMatcher{
											pos:        position{line: 275, col: 34, offset: 6017},
											val:        "[^']",
											chars:      []rune{'\''},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 41, offset: 6024},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "BOOL",
			pos:  position{line: 279, col: 1, offset: 6080},
			expr: &choiceExpr{
				pos: position{line: 279, col: 8, offset: 6087},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 279, col: 8, offset: 6087},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
					&litMatcher{
						pos:        position{line: 279, col: 17, offset: 6096},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&litMatcher{
						pos:        position{line: 279, col: 27, offset: 6106},
						val:        "True",
						ignoreCase: false,
						want:       "\"True\"",
					},
					&litMatcher{
						pos:        position{line: 279, col: 36, offset: 6115},
						val:        "False",
						ignoreCase: false,
						want:       "\"False\"",
					},
				},
			},
		},
		{
			name: "NULL",
			pos:  position{line: 280, col: 1, offset: 6123},
			expr: &litMatcher{
				pos:        position{line: 280, col: 8, offset: 6130},
				val:        "null",
				ignoreCase: false,
				want:       "\"null\"",
			},
		},
		{
			name: "EVALUATION",
			pos:  position{line: 282, col: 1, offset: 6138},
			expr: &ruleRefExpr{
				pos:  position{line: 282, col: 14, offset: 6151},
				name: "LITERAL",
			},
		},
		{
			name: "LITERAL",
			pos:  position{line: 284, col: 1, offset: 6160},
			expr: &choiceExpr{
				pos: position{line: 284, col: 11, offset: 6170},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 284, col: 11, offset: 6170},
						name: "DBL_LITERAL",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 25, offset: 6184},
						name: "SNG_LITERAL",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 39, offset: 6198},
						name: "NUMBER",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 48, offset: 6207},
						name: "BOOL",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 55, offset: 6214},
						name: "NULL",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 62, offset: 6221},
						name: "ARR",
					},
				},
			},
		},
		{
			name: "SNG_LITERAL",
			pos:  position{line: 286, col: 1, offset: 6226},
			expr: &actionExpr{
				pos: position{line: 286, col: 15, offset: 6240},
				run: (*parser).callonSNG_LITERAL1,
				expr: &seqExpr{
					pos: position{line: 286, col: 15, offset: 6240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 286, col: 15, offset: 6240},
							label: "q1",
							expr: &litMatcher{
								pos:        position{line: 286, col: 18, offset: 6243},
								val:        "'",
								ignoreCase: false,
								want:       "\"'\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 22, offset: 6247},
							label: "cc",
							expr: &zeroOrMoreExpr{
								pos: position{line: 286, col: 25, offset: 6250},
								expr: &charClassMatcher{
									pos:        position{line: 286, col: 25, offset: 6250},
									val:        "[^\\\\']",
									chars:      []rune{'\\', '\''},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 33, offset: 6258},
							label: "q2",
							expr: &litMatcher{
								pos:        position{line: 286, col: 36, offset: 6261},
								val:        "'",
								ignoreCase: false,
								want:       "\"'\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DBL_LITERAL",
			pos:  position{line: 287, col: 1, offset: 6352},
			expr: &actionExpr{
				pos: position{line: 287, col: 15, offset: 6366},
				run: (*parser).callonDBL_LITERAL1,
				expr: &seqExpr{
					pos: position{line: 287, col: 15, offset: 6366},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 287, col: 15, offset: 6366},
							label: "q1",
							expr: &litMatcher{
								pos:        position{line: 287, col: 18, offset: 6369},
								val:        "\"",
								ignoreCase: false,
								want:       "\"\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 22, offset: 6373},
							label: "cc",
							expr: &zeroOrMoreExpr{
								pos: position{line: 287, col: 25, offset: 6376},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 25, offset: 6376},
									val:        "[^\\\\\"]",
									chars:      []rune{'\\', '"'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 33, offset: 6384},
							label: "q2",
							expr: &litMatcher{
								pos:        position{line: 287, col: 36, offset: 6387},
								val:        "\"",
								ignoreCase: false,
								want:       "\"\\\"\"",
							},
						},
					},
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 289, col: 1, offset: 6480},
			expr: &actionExpr{
				pos: position{line: 289, col: 10, offset: 6489},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 289, col: 10, offset: 6489},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 289, col: 10, offset: 6489},
							label: "num",
							expr: &oneOrMoreExpr{
								pos: position{line: 289, col: 14, offset: 6493},
								expr: &charClassMatcher{
									pos:        position{line: 289, col: 14, offset: 6493},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 21, offset: 6500},
							label: "tail",
							expr: &zeroOrOneExpr{
								pos: position{line: 289, col: 26, offset: 6505},
								expr: &seqExpr{
									pos: position{line: 289, col: 27, offset: 6506},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 289, col: 27, offset: 6506},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 289, col: 31, offset: 6510},
											expr: &charClassMatcher{
												pos:        position{line: 289, col: 31, offset: 6510},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ARR",
			pos:  position{line: 301, col: 1, offset: 6737},
			expr: &actionExpr{
				pos: position{line: 301, col: 7, offset: 6743},
				run: (*parser).callonARR1,
				expr: &seqExpr{
					pos: position{line: 301, col: 7, offset: 6743},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 7, offset: 6743},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 11, offset: 6747},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 3, offset: 6752},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 8, offset: 6757},
								expr: &actionExpr{
									pos: position{line: 302, col: 9, offset: 6758},
									run: (*parser).callonARR7,
									expr: &seqExpr{
										pos: position{line: 302, col: 9, offset: 6758},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 302, col: 9, offset: 6758},
												label: "hd",
												expr: &ruleRefExpr{
													pos:  position{line: 302, col: 12, offset: 6761},
													name: "LITERAL",
												},
											},
											&labeledExpr{
												pos:   position{line: 302, col: 20, offset: 6769},
												label: "items",
												expr: &zeroOrMoreExpr{
													pos: position{line: 302, col: 26, offset: 6775},
													expr: &actionExpr{
														pos: position{line: 302, col: 27, offset: 6776},
														run: (*parser).callonARR13,
														expr: &seqExpr{
															pos: position{line: 302, col: 27, offset: 6776},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 302, col: 27, offset: 6776},
																	name: "__",
																},
																&litMatcher{
																	pos:        position{line: 302, col: 30, offset: 6779},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&ruleRefExpr{
																	pos:  position{line: 302, col: 34, offset: 6783},
																	name: "__",
																},
																&labeledExpr{
																	pos:   position{line: 302, col: 37, offset: 6786},
																	label: "e",
																	expr: &ruleRefExpr{
																		pos:  position{line: 302, col: 39, offset: 6788},
																		name: "LITERAL",
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 302, col: 67, offset: 6816},
												name: "__",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 306, col: 1, offset: 6875},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 315, col: 1, offset: 7022},
			expr: &zeroOrMoreExpr{
				pos: position{line: 315, col: 6, offset: 7027},
				expr: &charClassMatcher{
					pos:        position{line: 315, col: 6, offset: 7027},
					val:        "[ ]",
					chars:      []rune{' '},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
	},
}

func (c *current) onQUERY5(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonQUERY5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQUERY5(stack["e"])
}

func (c *current) onQUERY1(base, last interface{}) (interface{}, error) {
	return append(base.([]any), last), nil
}

func (p *parser) callonQUERY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQUERY1(stack["base"], stack["last"])
}

func (c *current) onELEMENT7(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonELEMENT7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELEMENT7(stack["l"])
}

func (c *current) onELEMENT1(action, levels, last interface{}) (interface{}, error) {
	var blocks []*Block

	for _, level := range levels.([]any) {
		if block, ok := level.(*Block); ok {
			blocks = append(blocks, block)
		}
	}
	block, ok := last.(*Block)
	// if last == "_" {
	if !ok {
		return &Element{Action: toString(action), Path: blocks, RootExpand: true}, nil
	}

	return &Element{Action: toString(action), Path: append(blocks, block)}, nil
}

func (p *parser) callonELEMENT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELEMENT1(stack["action"], stack["levels"], stack["last"])
}

func (c *current) onUNARY1(op interface{}) (interface{}, error) {

	if op == "-" {
		return "subtract", nil
	}
	return "add", nil
}

func (p *parser) callonUNARY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNARY1(stack["op"])
}

func (c *current) onNODE2(nodename, ranges interface{}) (interface{}, error) {
	name := toString(nodename)
	var arr []*Range
	if val, ok := ranges.([]interface{}); ok {
		for _, a := range val {
			arr = append(arr, a.(*Range))
		}
	}
	return &Node{Name: &name, Ranges: arr}, nil
}

func (p *parser) callonNODE2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODE2(stack["nodename"], stack["ranges"])
}

func (c *current) onNODE9(ranges interface{}) (interface{}, error) {

	var arr []*Range
	if val, ok := ranges.([]interface{}); ok {
		for _, a := range val {
			arr = append(arr, a.(*Range))
		}
	}
	return &Node{Name: nil, Ranges: arr}, nil

}

func (p *parser) callonNODE9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODE9(stack["ranges"])
}

func (c *current) onNODENAME2(head, tail interface{}) (interface{}, error) {
	return toString(head) + strings.Join(arrayToStringArray(tail), ""), nil
}

func (p *parser) callonNODENAME2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODENAME2(stack["head"], stack["tail"])
}

func (c *current) onNODERANGE12(to interface{}) (interface{}, error) {
	return to, nil
}

func (p *parser) callonNODERANGE12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODERANGE12(stack["to"])
}

func (c *current) onNODERANGE6(from, to interface{}) (interface{}, error) {
	fromValue := toString(from)
	toValue := toString(to)
	return &Range{From: &fromValue, To: &toValue}, nil
}

func (p *parser) callonNODERANGE6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODERANGE6(stack["from"], stack["to"])
}

func (c *current) onNODERANGE1(ranges interface{}) (interface{}, error) {
	return ranges, nil
}

func (p *parser) callonNODERANGE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNODERANGE1(stack["ranges"])
}

func (c *current) onINT1(num interface{}) (interface{}, error) {
	return strings.Join(arrayToStringArray(num), ""), nil
}

func (p *parser) callonINT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINT1(stack["num"])
}

func (c *current) onLEVEL2(children interface{}) (interface{}, error) {
	var arr []*Element
	if val, ok := children.([]interface{}); ok {
		for _, a := range val {
			arr = append(arr, a.(*Element))
		}
	}
	return &Block{IsGroup: true, Children: arr}, nil
}

func (p *parser) callonLEVEL2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEVEL2(stack["children"])
}

func (c *current) onLEVEL8(block interface{}) (interface{}, error) {
	return &Block{Any: false, Catchall: true, Filter: block.(*Filter)}, nil
}

func (p *parser) callonLEVEL8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEVEL8(stack["block"])
}

func (c *current) onLEVEL13(block interface{}) (interface{}, error) {
	return &Block{Any: true, Filter: block.(*Filter)}, nil
}

func (p *parser) callonLEVEL13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEVEL13(stack["block"])
}

func (c *current) onLEVEL18(node, block interface{}) (interface{}, error) {
	return &Block{Any: false, Node: node.(*Node), Filter: block.(*Filter)}, nil
}

func (p *parser) callonLEVEL18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEVEL18(stack["node"], stack["block"])
}

func (c *current) onBLOCK2(limits, filter interface{}) (interface{}, error) {

	var filters [][]*Expression

	for _, i := range filter.([]any) {
		var expressions []*Expression
		for _, j := range i.([]any) {
			expressions = append(expressions, j.(*Expression))
		}
		filters = append(filters, expressions)
	}

	return &Filter{filters}, nil
}

func (p *parser) callonBLOCK2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLOCK2(stack["limits"], stack["filter"])
}

func (c *current) onBLOCK8(filter, limits interface{}) (interface{}, error) {
	var filters [][]*Expression

	for _, i := range filter.([]any) {
		var expressions []*Expression
		for _, j := range i.([]any) {
			expressions = append(expressions, j.(*Expression))
		}
		filters = append(filters, expressions)
	}

	return &Filter{filters}, nil
}

func (p *parser) callonBLOCK8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLOCK8(stack["filter"], stack["limits"])
}

func (c *current) onBLOCK14(filter interface{}) (interface{}, error) {
	var filters [][]*Expression

	for _, i := range filter.([]any) {
		var expressions []*Expression
		for _, j := range i.([]any) {
			expressions = append(expressions, j.(*Expression))
		}
		filters = append(filters, expressions)
	}

	return &Filter{filters}, nil
}

func (p *parser) callonBLOCK14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLOCK14(stack["filter"])
}

func (c *current) onLIMIT2(sort, limit, offset interface{}) (interface{}, error) {
	return &Limit{Sort: sort, Limits: &Limits{limit.(int), offset.(int)}}, nil
}

func (p *parser) callonLIMIT2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT2(stack["sort"], stack["limit"], stack["offset"])
}

func (c *current) onLIMIT13(sort, limit interface{}) (interface{}, error) {
	return &Limit{Sort: sort, Limits: &Limits{limit.(int), 0}}, nil
}

func (p *parser) callonLIMIT13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT13(stack["sort"], stack["limit"])
}

func (c *current) onLIMIT21(sort interface{}) (interface{}, error) {

	return &Limit{Sort: sort}, nil
}

func (p *parser) callonLIMIT21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT21(stack["sort"])
}

func (c *current) onSORT2(direction, v interface{}) (interface{}, error) {
	return &Direction{toString(direction), v}, nil
}

func (p *parser) callonSORT2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSORT2(stack["direction"], stack["v"])
}

func (c *current) onDIRECTION1(d interface{}) (interface{}, error) {
	if d == nil {
		return "ASC", nil
	}
	return "DESC", nil
}

func (p *parser) callonDIRECTION1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION1(stack["d"])
}

func (c *current) onSEARCH4(filter interface{}) (interface{}, error) {
	return filter, nil
}

func (p *parser) callonSEARCH4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSEARCH4(stack["filter"])
}

func (c *current) onSEARCH1(filters interface{}) (interface{}, error) {
	return filters, nil
}

func (p *parser) callonSEARCH1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSEARCH1(stack["filters"])
}

func (c *current) onFILTER2(expression, boolOp interface{}) (interface{}, error) {
	expressionValue, _ := expression.(*Variable)
	return &Expression{expressionValue, toString(boolOp)}, nil
}

func (p *parser) callonFILTER2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFILTER2(stack["expression"], stack["boolOp"])
}

func (c *current) onEXPRESSION1(variable, op, evaluation interface{}) (interface{}, error) {
	var arr []string
	for _, i := range variable.([]any) {
		arr = append(arr, toString(i))
	}
	return &Variable{arr, toString(op), toString(evaluation)}, nil
}

func (p *parser) callonEXPRESSION1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXPRESSION1(stack["variable"], stack["op"], stack["evaluation"])
}

func (c *current) onVARIABLE1(variable, attribute interface{}) (interface{}, error) {
	return append([]any{variable}, attribute.([]any)...), nil
}

func (p *parser) callonVARIABLE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVARIABLE1(stack["variable"], stack["attribute"])
}

func (c *current) onATTRIBUTE2(attrname interface{}) (interface{}, error) {
	return attrname, nil
}

func (p *parser) callonATTRIBUTE2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onATTRIBUTE2(stack["attrname"])
}

func (c *current) onATTRIBUTE7(attrname interface{}) (interface{}, error) {

	return attrname, nil
}

func (p *parser) callonATTRIBUTE7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onATTRIBUTE7(stack["attrname"])
}

func (c *current) onATTRNAME1(attrname interface{}) (interface{}, error) {
	var arr []string

	for _, a := range attrname.([]any) {
		arr = append(arr, toString(a))
	}

	return strings.Join(arr, ""), nil
}

func (p *parser) callonATTRNAME1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onATTRNAME1(stack["attrname"])
}

func (c *current) onSTRING_LITERAL1(text interface{}) (interface{}, error) {
	return strings.Join(text.([]string), ""), nil
}

func (p *parser) callonSTRING_LITERAL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRING_LITERAL1(stack["text"])
}

func (c *current) onSNG_LITERAL1(q1, cc, q2 interface{}) (interface{}, error) {
	return toString(q1) + strings.Join(arrayToStringArray(cc), "") + toString(q2), nil
}

func (p *parser) callonSNG_LITERAL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSNG_LITERAL1(stack["q1"], stack["cc"], stack["q2"])
}

func (c *current) onDBL_LITERAL1(q1, cc, q2 interface{}) (interface{}, error) {
	return toString(q1) + strings.Join(arrayToStringArray(cc), "") + toString(q2), nil
}

func (p *parser) callonDBL_LITERAL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDBL_LITERAL1(stack["q1"], stack["cc"], stack["q2"])
}

func (c *current) onNUMBER1(num, tail interface{}) (interface{}, error) {
	fmt.Println("AAAAAAaa")
	arr := tail.([]string)
	var end string
	if len(arr) > 0 {
		// FIXME [][]arr?
		// end = "." + strings.Join(arr[1], "")
	}

	return strings.Join(num.([]string), "") + end, nil
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1(stack["num"], stack["tail"])
}

func (c *current) onARR13(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonARR13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onARR13(stack["e"])
}

func (c *current) onARR7(hd, items interface{}) (interface{}, error) {
	arr := []any{hd}
	return append(arr, items), nil
}

func (p *parser) callonARR7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onARR7(stack["hd"], stack["items"])
}

func (c *current) onARR1(body interface{}) (interface{}, error) {
	bodyArr := body.([]string)
	arr := []string{}
	if len(bodyArr) > 0 {
		arr = append(arr, strings.Join(bodyArr, ","))
	}
	return arr, nil
}

func (p *parser) callonARR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onARR1(stack["body"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
